/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Å–µ—Å—Å–∏–π
 * –ó–∞–ø—É—Å–∫: node test-session-logic.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testCases = [
  {
    name: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'nonexistent@example.com',
    expectedSuccess: false,
    expectedMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Tilda.'
  },
  {
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å)',
    email: 'nopurchases@example.com',
    expectedSuccess: false,
    expectedMessage: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫. –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Tilda.'
  },
  {
    name: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
    email: 'invalid-email',
    expectedSuccess: false,
    expectedError: 'BadRequestException'
  }
];

async function testSession(email, testCase) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
    console.log(`üìß Email: ${email}`);
    
    const response = await axios.get(`${BASE_URL}/api/wheel/session`, {
      params: { email },
      validateStatus: () => true // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
    });
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`üìã –û—Ç–≤–µ—Ç:`, response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (testCase.expectedError) {
      if (response.status === 400) {
        console.log(`‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
      } else {
        console.log(`‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å ${response.status}`);
      }
    } else if (testCase.expectedSuccess === false) {
      if (response.data.success === false && response.data.message === testCase.expectedMessage) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expectedMessage}`);
      }
    } else {
      if (response.data.success === true) {
        console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üéØ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫: ${response.data.spinsRemaining}`);
      } else {
        console.log(`‚ùå –°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞`);
      }
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message);
  }
}

async function testWithPurchase() {
  console.log(`\nüõí –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Tilda webhook...`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ 6000 —Ä—É–±–ª–µ–π (2 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
    const purchaseResponse = await axios.post(`${BASE_URL}/api/tilda/webhook`, {
      email: 'testuser@example.com',
      amount: 6000,
      order_id: 'test_order_001'
    });
    
    console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:`, purchaseResponse.data);
    
    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    console.log(`\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–æ–π...`);
    await testSession('testuser@example.com', {
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–æ–π',
      expectedSuccess: true
    });
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏:`, error.response?.data || error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ —Å–µ—Å—Å–∏–π...');
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await axios.get(`${BASE_URL}/api/docs`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
  for (const testCase of testCases) {
    await testSession(testCase.email, testCase);
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ–∫—É–ø–∫–æ–π
  await testWithPurchase();
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);