/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
 * –ó–∞–ø—É—Å–∫: node test-mandatory-prizes.js
 */

const API_BASE = 'http://localhost:3000/api';

async function testMandatoryPrizes() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...\n');

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...');
    const dailyResponse = await fetch(`${API_BASE}/mandatory-prizes/daily`, {
      method: 'POST',
    });
    const dailyResult = await dailyResponse.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', dailyResult);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...');
    const activeResponse = await fetch(`${API_BASE}/mandatory-prizes/active`);
    const activePrizes = await activeResponse.json();
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:');
    activePrizes.forEach(prize => {
      console.log(`   - ${prize.prize.name}: ${prize.issued_quantity}/${prize.target_quantity} –≤—ã–¥–∞–Ω–æ`);
      console.log(`     –ü–µ—Ä–∏–æ–¥: ${new Date(prize.period_start).toLocaleString()} - ${new Date(prize.period_end).toLocaleString()}`);
    });

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...');
    const priorityResponse = await fetch(`${API_BASE}/mandatory-prizes/priority`);
    const priorityPrizes = await priorityResponse.json();
    console.log('‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:');
    priorityPrizes.forEach(prize => {
      console.log(`   - ${prize.prize.name}: ${prize.issued_quantity}/${prize.target_quantity} –≤—ã–¥–∞–Ω–æ`);
    });

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏...');
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const sessionResponse = await fetch(`${API_BASE}/wheel/session?email=mandatory-test@example.com`);
    const session = await sessionResponse.json();
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session.sessionId);

    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    const spins = Math.min(session.spinsRemaining, 5);
    for (let i = 1; i <= spins; i++) {
      console.log(`\n   –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ${i}/${spins}:`);
      
      const spinResponse = await fetch(`${API_BASE}/wheel/spin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sessionId: session.sessionId }),
      });
      
      const result = await spinResponse.json();
      
      if (!spinResponse.ok) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        break;
      }
      
      console.log(`   üéÅ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑: ${result.prize}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤...');
    const updatedActiveResponse = await fetch(`${API_BASE}/mandatory-prizes/active`);
    const updatedActivePrizes = await updatedActiveResponse.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏:');
    updatedActivePrizes.forEach(prize => {
      console.log(`   - ${prize.prize.name}: ${prize.issued_quantity}/${prize.target_quantity} –≤—ã–¥–∞–Ω–æ`);
    });

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMandatoryPrizes();