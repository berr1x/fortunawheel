/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Tilda webhook
 * –ó–∞–ø—É—Å–∫: node test-tilda-webhook.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook'–∞
const testWebhooks = [
  {
    name: '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 1500 —Ä—É–±–ª–µ–π (0 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)',
    data: {
      email: 'test1@example.com',
      amount: 1500,
      order_id: 'order_1500_001'
    }
  },
  {
    name: '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 3000 —Ä—É–±–ª–µ–π (1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞)',
    data: {
      email: 'test2@example.com',
      amount: 3000,
      order_id: 'order_3000_001'
    }
  },
  {
    name: '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 9000 —Ä—É–±–ª–µ–π (3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)',
    data: {
      email: 'test3@example.com',
      amount: 9000,
      order_id: 'order_9000_001'
    }
  },
  {
    name: '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ 10000 —Ä—É–±–ª–µ–π (3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)',
    data: {
      email: 'test4@example.com',
      amount: 10000,
      order_id: 'order_10000_001'
    }
  },
  {
    name: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    data: {
      email: 'test2@example.com',
      amount: 6000,
      order_id: 'order_6000_001'
    }
  }
];

async function testWebhook(webhookData) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${webhookData.name}`);
    console.log(`üìä –î–∞–Ω–Ω—ã–µ:`, webhookData.data);
    
    const response = await axios.post(`${BASE_URL}/api/tilda/webhook`, webhookData.data, {
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Tilda-Webhook-Test'
      }
    });
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç:`, response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    const expectedSpins = Math.floor(webhookData.data.amount / 3000);
    if (response.data.spinsEarned === expectedSpins) {
      console.log(`üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${response.data.spinsEarned}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫! –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedSpins}, –ø–æ–ª—É—á–µ–Ω–æ: ${response.data.spinsEarned}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞:`, error.response?.data || error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Tilda webhook...');
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await axios.get(`${BASE_URL}/api/docs`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    return;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  for (const webhook of testWebhooks) {
    await testWebhook(webhook);
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);