/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
 * –ó–∞–ø—É—Å–∫: node test-infinite-spins-bug.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testInfiniteSpinsBug() {
  console.log('üêõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Tilda webhook
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ 3000 —Ä—É–±–ª–µ–π (1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞)...');
    const purchaseResponse = await axios.post(`${BASE_URL}/api/tilda/webhook`, {
      email: 'bugtest@example.com',
      amount: 3000,
      order_id: 'bug_test_order_001'
    });
    
    console.log('‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', purchaseResponse.data);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é...');
    const sessionResponse1 = await axios.get(`${BASE_URL}/api/wheel/session`, {
      params: { email: 'bugtest@example.com' }
    });
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', sessionResponse1.data);
    const sessionId = sessionResponse1.data.sessionId;
    
    // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    console.log('\n3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏...');
    const spinResponse = await axios.post(`${BASE_URL}/api/wheel/spin`, {
      sessionId: sessionId
    });
    
    console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', spinResponse.data);
    
    // 4. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    console.log('\n4Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)...');
    try {
      const spinResponse2 = await axios.post(`${BASE_URL}/api/wheel/spin`, {
        sessionId: sessionId
      });
      console.log('‚ùå –ë–ê–ì! –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', spinResponse2.data);
    } catch (error) {
      console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', error.response?.data?.message || error.message);
    }
    
    // 5. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    console.log('\n5Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)...');
    try {
      const sessionResponse2 = await axios.get(`${BASE_URL}/api/wheel/session`, {
        params: { email: 'bugtest@example.com' }
      });
      
      if (sessionResponse2.data.success === false) {
        console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', sessionResponse2.data.message);
      } else {
        console.log('‚ùå –ë–ê–ì! –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', sessionResponse2.data);
      }
    } catch (error) {
      console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', error.response?.data?.message || error.message);
    }
    
    // 6. –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è
    console.log('\n6Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∫—É –Ω–∞ 6000 —Ä—É–±–ª–µ–π (2 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)...');
    const purchaseResponse2 = await axios.post(`${BASE_URL}/api/tilda/webhook`, {
      email: 'bugtest@example.com',
      amount: 6000,
      order_id: 'bug_test_order_002'
    });
    
    console.log('‚úÖ –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', purchaseResponse2.data);
    
    // 7. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–∫—É–ø–∫–∏
    console.log('\n7Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–∫—É–ø–∫–∏...');
    const sessionResponse3 = await axios.get(`${BASE_URL}/api/wheel/session`, {
      params: { email: 'bugtest@example.com' }
    });
    
    if (sessionResponse3.data.success === true) {
      console.log('‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', sessionResponse3.data);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', sessionResponse3.data);
    }
    
    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞...');
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await axios.get(`${BASE_URL}/api/docs`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    return;
  }
  
  await testInfiniteSpinsBug();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest().catch(console.error);