/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
 * –ó–∞–ø—É—Å–∫: node test-won-prizes.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testWonPrizes() {
  console.log('üéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑—ã
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ 9000 —Ä—É–±–ª–µ–π (3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)...');
    const purchaseResponse = await axios.post(`${BASE_URL}/api/tilda/webhook`, {
      email: 'prizetest@example.com',
      amount: 9000,
      order_id: 'prize_test_order_001'
    });
    
    console.log('‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', purchaseResponse.data);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é...');
    const sessionResponse = await axios.get(`${BASE_URL}/api/wheel/session`, {
      params: { email: 'prizetest@example.com' }
    });
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', sessionResponse.data);
    const sessionId = sessionResponse.data.sessionId;
    
    // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    console.log('\n3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏...');
    const spinResults = [];
    
    for (let i = 0; i < 3; i++) {
      try {
        const spinResponse = await axios.post(`${BASE_URL}/api/wheel/spin`, {
          sessionId: sessionId
        });
        
        console.log(`‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ${i + 1}:`, spinResponse.data);
        spinResults.push(spinResponse.data);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ${i + 1}:`, error.response?.data?.message || error.message);
      }
    }
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã...');
    const wonPrizesResponse = await axios.get(`${BASE_URL}/api/wheel/won-prizes`, {
      params: { email: 'prizetest@example.com' }
    });
    
    console.log('‚úÖ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã –ø–æ–ª—É—á–µ–Ω—ã:');
    console.log(JSON.stringify(wonPrizesResponse.data, null, 2));
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...');
    const nonExistentResponse = await axios.get(`${BASE_URL}/api/wheel/won-prizes`, {
      params: { email: 'nonexistent@example.com' }
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', nonExistentResponse.data);
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email...');
    try {
      await axios.get(`${BASE_URL}/api/wheel/won-prizes`, {
        params: { email: 'invalid-email' }
      });
    } catch (error) {
      console.log('‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', error.response?.data?.message || error.message);
    }
    
    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤...');
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await axios.get(`${BASE_URL}/api/docs`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    return;
  }
  
  await testWonPrizes();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest().catch(console.error);