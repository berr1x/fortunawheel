/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
 * –ó–∞–ø—É—Å–∫: node test-wheel.js
 */

const API_BASE = 'http://localhost:3000/api';

async function testWheelAPI() {
  console.log('üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã...\n');

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    const sessionResponse = await fetch(`${API_BASE}/wheel/session?email=test@example.com`);
    const session = await sessionResponse.json();
    
    if (!sessionResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${session.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session);
    const sessionId = session.sessionId;

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤...');
    const prizesResponse = await fetch(`${API_BASE}/wheel/prizes`);
    const prizes = await prizesResponse.json();
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:', prizes);

    // 3. –ü—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞
    console.log('\n3. –ü—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞...');
    const spins = Math.min(session.spinsRemaining, 7); // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ 7 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    
    for (let i = 1; i <= spins; i++) {
      console.log(`\n   –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ${i}/${spins}:`);
      
      const spinResponse = await fetch(`${API_BASE}/wheel/spin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sessionId }),
      });
      
      const result = await spinResponse.json();
      
      if (!spinResponse.ok) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        break;
      }
      
      console.log(`   üéÅ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑: ${result.prize}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testWheelAPI();